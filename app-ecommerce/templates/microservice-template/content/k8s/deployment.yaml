{% if values.hasK8s %}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ values.name }}
  namespace: ecommerce-${{ values.environment }}
  labels:
    app: ${{ values.name }}
    component: microservice
    system: ecommerce-platform
    team: ${{ values.owner }}
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ${{ values.name }}
  template:
    metadata:
      labels:
        app: ${{ values.name }}
        component: microservice
        system: ecommerce-platform
        team: ${{ values.owner }}
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "${{ values.port }}"
        prometheus.io/path: "/metrics"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      serviceAccountName: ${{ values.name }}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: ${{ values.name }}
        image: ghcr.io/company/ecommerce/${{ values.name }}:latest
        imagePullPolicy: Always
        ports:
        - containerPort: ${{ values.port }}
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "${{ values.environment }}"
        - name: PORT
          value: "${{ values.port }}"
        - name: SERVICE_NAME
          value: "${{ values.name }}"
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {% if values.database == "postgresql" %}
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: ${{ values.name }}-secrets
              key: db-host
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${{ values.name }}-secrets
              key: db-password
        {% endif %}
        {% if values.database == "mongodb" %}
        - name: MONGODB_URL
          valueFrom:
            secretKeyRef:
              name: ${{ values.name }}-secrets
              key: mongodb-url
        {% endif %}
        {% if values.hasCache or values.database == "redis-only" %}
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: shared-secrets
              key: redis-url
        {% endif %}
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: shared-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: ${{ values.port }}
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: ${{ values.port }}
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: uploads
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ${{ values.name }}
  namespace: ecommerce-${{ values.environment }}
  labels:
    app: ${{ values.name }}
    component: microservice
    system: ecommerce-platform
spec:
  selector:
    app: ${{ values.name }}
  ports:
  - port: 80
    targetPort: ${{ values.port }}
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${{ values.name }}-sa
  namespace: ecommerce-${{ values.environment }}
  labels:
    app: ${{ values.name }}
automountServiceAccountToken: false
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ${{ values.name }}-hpa
  namespace: ecommerce-${{ values.environment }}
  labels:
    app: ${{ values.name }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${{ values.name }}
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ${{ values.name }}-pdb
  namespace: ecommerce-${{ values.environment }}
  labels:
    app: ${{ values.name }}
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ${{ values.name }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ${{ values.name }}-netpol
  namespace: ecommerce-${{ values.environment }}
  labels:
    app: ${{ values.name }}
spec:
  podSelector:
    matchLabels:
      app: ${{ values.name }}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: ${{ values.port }}
  egress:
  {% if values.database == "postgresql" %}
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  {% endif %}
  {% if values.database == "mongodb" %}
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  {% endif %}
  {% if values.hasCache or values.database == "redis-only" %}
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  {% endif %}
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  # Allow external API calls (if needed)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
{% endif %}