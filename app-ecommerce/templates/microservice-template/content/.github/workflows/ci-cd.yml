{% if values.hasCICD %}
name: ${{ values.name | title }} Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'services/${{ values.name }}/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/${{ values.name }}/**'

env:
  SERVICE_NAME: ${{ values.name }}
  REGISTRY: ghcr.io
  NAMESPACE: company/ecommerce

jobs:
  test:
    name: Test & Quality Gate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/${{ values.name }}
    
    services:
      {% if values.database == "postgresql" %}
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_${{ values.name | replace("-", "_") }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      {% endif %}
      {% if values.database == "mongodb" %}
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_DATABASE: test_${{ values.name | replace("-", "_") }}
        ports:
          - 27017:27017
      {% endif %}
      {% if values.hasCache or values.database == "redis-only" %}
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      {% endif %}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: services/${{ values.name }}/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm test
      env:
        NODE_ENV: test
        {% if values.database == "postgresql" %}
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_${{ values.name | replace("-", "_") }}
        DB_USER: postgres
        DB_PASSWORD: postgres
        {% endif %}
        {% if values.database == "mongodb" %}
        MONGODB_URL: mongodb://localhost:27017/test_${{ values.name | replace("-", "_") }}
        {% endif %}
        {% if values.hasCache or values.database == "redis-only" %}
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        {% endif %}
        JWT_SECRET: test-secret-key
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        {% if values.database == "postgresql" %}
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_${{ values.name | replace("-", "_") }}
        DB_USER: postgres
        DB_PASSWORD: postgres
        {% endif %}
        {% if values.database == "mongodb" %}
        MONGODB_URL: mongodb://localhost:27017/test_${{ values.name | replace("-", "_") }}
        {% endif %}
        {% if values.hasCache or values.database == "redis-only" %}
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        {% endif %}
        JWT_SECRET: test-secret-key
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: ${{ values.name }}
        name: ${{ values.name }}-coverage

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/${{ values.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: '${{ values.name }}'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

  build:
    name: Build & Push Container
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    defaults:
      run:
        working-directory: services/${{ values.name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ '${{ env.REGISTRY }}' }}
        username: ${{ '${{ github.actor }}' }}
        password: ${{ '${{ secrets.GITHUB_TOKEN }}' }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.NAMESPACE }}' }}/${{ '${{ env.SERVICE_NAME }}' }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ values.name }}
        push: true
        tags: ${{ '${{ steps.meta.outputs.tags }}' }}
        labels: ${{ '${{ steps.meta.outputs.labels }}' }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SERVICE_NAME=${{ values.name }}
          BUILD_DATE=${{ '${{ github.event.head_commit.timestamp }}' }}
          VCS_REF=${{ '${{ github.sha }}' }}

  vulnerability-scan:
    name: Container Vulnerability Scan
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.NAMESPACE }}' }}/${{ '${{ env.SERVICE_NAME }}' }}:${{ '${{ github.sha }}' }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [test, security, build, vulnerability-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://${{ values.name }}-staging.ecommerce.company.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ '${{ secrets.AWS_ACCESS_KEY_ID }}' }}
        aws-secret-access-key: ${{ '${{ secrets.AWS_SECRET_ACCESS_KEY }}' }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ecommerce-staging-cluster
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f services/${{ values.name }}/k8s/ -n ecommerce-staging
        kubectl set image deployment/${{ values.name }} ${{ values.name }}=${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.NAMESPACE }}' }}/${{ '${{ env.SERVICE_NAME }}' }}:${{ '${{ github.sha }}' }} -n ecommerce-staging
    
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/${{ values.name }} -n ecommerce-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Get service endpoint
        SERVICE_URL=$(kubectl get svc ${{ values.name }} -n ecommerce-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run health check
        curl -f http://${SERVICE_URL}/health || exit 1
        curl -f http://${SERVICE_URL}/ready || exit 1

  deploy-production:
    name: Deploy to Production
    needs: [test, security, build, vulnerability-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://${{ values.name }}.ecommerce.company.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Manual approval required
      uses: hmarr/auto-approve-action@v3
      with:
        github-token: ${{ '${{ secrets.GITHUB_TOKEN }}' }}
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ '${{ secrets.AWS_ACCESS_KEY_ID }}' }}
        aws-secret-access-key: ${{ '${{ secrets.AWS_SECRET_ACCESS_KEY }}' }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ecommerce-production-cluster
    
    - name: Blue-Green Deployment
      run: |
        # Apply green deployment
        kubectl apply -f services/${{ values.name }}/k8s/ -n ecommerce-production
        kubectl set image deployment/${{ values.name }} ${{ values.name }}=${{ '${{ env.REGISTRY }}' }}/${{ '${{ env.NAMESPACE }}' }}/${{ '${{ env.SERVICE_NAME }}' }}:${{ '${{ github.sha }}' }} -n ecommerce-production
        
        # Wait for green deployment
        kubectl rollout status deployment/${{ values.name }} -n ecommerce-production --timeout=600s
        
        # Run production health checks
        kubectl run --rm -i --tty health-check-${{ '${{ github.sha }}' }} \
          --image=curlimages/curl --restart=Never -- \
          curl -f http://${{ values.name }}.ecommerce-production.svc.cluster.local/health

  notification:
    name: Notify Teams
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ '${{ job.status }}' }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ '${{ secrets.SLACK_WEBHOOK }}' }}
        channel: '#platform-deployments'
        username: 'GitHub Actions'
        icon_emoji: ':rocket:'
        title: '${{ values.name | title }} Service Deployment'
        text: |
          Service: ${{ values.name }}
          Environment: ${{ '${{ github.ref == \'refs/heads/main\' && \'production\' || \'staging\' }}' }}
          Status: ${{ '${{ job.status }}' }}
          Commit: ${{ '${{ github.sha }}' }}
          Author: ${{ '${{ github.actor }}' }}
{% endif %}