apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: user-service
  title: User Service
  description: Authentication, authorization, and user management microservice
  tags:
    - microservice
    - authentication
    - nodejs
    - postgresql
    - jwt
  annotations:
    backstage.io/techdocs-ref: dir:.
    github.com/project-slug: redhat/demojam-ecommerce
    backstage.io/source-location: url:file:///home/jeanlopez/Documents/redhat/demojam/ecommerce-platform/services/user-service
spec:
  type: service
  lifecycle: production
  owner: auth-team
  system: ecommerce-platform
  providesApis:
    - user-management-api
  dependsOn:
    - resource:user-database
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: user-management-api
  title: User Management API
  description: Complete user authentication and management API
  tags:
    - rest-api
    - authentication
    - users
spec:
  type: openapi
  lifecycle: production
  owner: auth-team
  system: ecommerce-platform
  definition: |
    openapi: 3.0.0
    info:
      title: User Management API
      version: 1.0.0
      description: Authentication and user management endpoints
    servers:
      - url: http://localhost:3001
        description: Development server
    paths:
      /auth/login:
        post:
          summary: User authentication
          description: Authenticate user with email and password
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                      minLength: 8
          responses:
            '200':
              description: Authentication successful
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                      user:
                        type: object
            '401':
              description: Authentication failed
      /auth/register:
        post:
          summary: User registration
          description: Register a new user account
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                      minLength: 8
                    firstName:
                      type: string
                    lastName:
                      type: string
          responses:
            '201':
              description: User created successfully
            '400':
              description: Invalid input data
            '409':
              description: User already exists
      /users/profile:
        get:
          summary: Get user profile
          description: Retrieve authenticated user's profile
          security:
            - bearerAuth: []
          responses:
            '200':
              description: User profile data
            '401':
              description: Unauthorized
    components:
      securitySchemes:
        bearerAuth:
          type: http
          scheme: bearer
          bearerFormat: JWT