apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: user-service
  title: User Service
  description: User profile management microservice built with Quarkus + Java 25 - handles user data and preferences
  tags:
    - microservice
    - quarkus
    - java-25
    - postgresql
    - user-management
    - no-direct-auth  # Auth handled by API Gateway
  annotations:
    backstage.io/techdocs-ref: dir:.
    github.com/project-slug: redhat/demojam-ecommerce
    backstage.io/source-location: url:file:///home/jeanlopez/Documents/redhat/demojam/app-ecommerce/services/user-service
    quarkus.io/dev-ui: http://localhost:3001/q/dev-ui
    quarkus.io/health: http://localhost:3001/q/health
    quarkus.io/metrics: http://localhost:3001/q/metrics
    quarkus.io/swagger: http://localhost:3001/q/swagger-ui
spec:
  type: service
  lifecycle: production
  owner: auth-team
  system: ecommerce-platform
  providesApis:
    - user-management-api
  dependsOn:
    - resource:user-postgres-db
    - component:api-gateway  # Depends on gateway for authentication
  consumesApis: []  # No external API calls - receives headers from gateway
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: user-management-api
  title: User Management API
  description: User profile management API - accessed via API Gateway only
  tags:
    - rest-api
    - users
    - quarkus
    - internal-only  # Not exposed to internet
spec:
  type: openapi
  lifecycle: production
  owner: auth-team
  system: ecommerce-platform
  definition: |
    openapi: 3.0.0
    info:
      title: User Management API
      version: 1.0.0
      description: User profile management endpoints (internal access via API Gateway)
    servers:
      - url: http://user-service:3001
        description: Internal service (Docker/Kubernetes DNS)
    paths:
      /users/profile:
        get:
          summary: Get user profile
          description: Get current user profile from headers (no authentication needed)
          responses:
            '200':
              description: User profile data
            '403':
              description: Direct access forbidden - use API Gateway
        put:
          summary: Update user profile
          description: Update current user profile
          responses:
            '200':
              description: Profile updated successfully
            '403':
              description: Direct access forbidden - use API Gateway
      /q/health:
        get:
          summary: Service health check
          responses:
            '200':
              description: Service is healthy
---
apiVersion: backstage.io/v1alpha1
kind: Resource
metadata:
  name: user-postgres-db
  title: User Service Database
  description: Dedicated PostgreSQL database for user service data
  tags:
    - database
    - postgresql
    - dedicated
    - containerized
spec:
  type: database
  lifecycle: production
  owner: platform-team
  system: ecommerce-platform