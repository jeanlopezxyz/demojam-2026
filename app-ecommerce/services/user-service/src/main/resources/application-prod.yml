# Production Profile - OpenShift deployment
quarkus:
  # HTTP Configuration for OpenShift
  http:
    port: 8080  # Standard OpenShift port
    host: 0.0.0.0
    
  # Database Configuration (will be injected via ConfigMap/Secrets)
  datasource:
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    jdbc:
      url: ${DATABASE_URL}
      
  # Container Configuration for OpenShift
  container-image:
    builder: jib
    group: ${CONTAINER_REGISTRY_GROUP}
    name: user-service
    tag: ${IMAGE_TAG}
    registry: ${CONTAINER_REGISTRY}
    
  # OpenShift specific configuration
  openshift:
    namespace: ${OPENSHIFT_NAMESPACE:ecommerce-production}
    labels:
      app: user-service
      component: microservice
      version: v1
    annotations:
      app.openshift.io/runtime: quarkus
    route:
      expose: true
      host: ${SERVICE_ROUTE_HOST:}
    replicas: ${REPLICAS:3}
    
  # External Keycloak (OpenShift)
  oidc:
    auth-server-url: ${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}
    client-id: ${KEYCLOAK_CLIENT_ID}
    credentials:
      secret: ${KEYCLOAK_CLIENT_SECRET}
      
  # External Kafka (OpenShift AMQ Streams)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    security:
      protocol: SASL_SSL
    ssl:
      truststore-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION}
      truststore-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    sasl:
      mechanism: PLAIN
      jaas-config: |
        org.apache.kafka.common.security.plain.PlainLoginModule required
        username="${KAFKA_USERNAME}"
        password="${KAFKA_PASSWORD}";

# Production Reactive Messaging
mp:
  messaging:
    outgoing:
      user-events:
        connector: smallrye-kafka
        topic: ecommerce.user.events
        bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
        security-protocol: SASL_SSL
        sasl-mechanism: PLAIN
        sasl-jaas-config: |
          org.apache.kafka.common.security.plain.PlainLoginModule required
          username="${KAFKA_USERNAME}"
          password="${KAFKA_PASSWORD}";
        ssl-truststore-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION}
        ssl-truststore-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
        value-serializer: io.quarkus.kafka.client.serialization.JsonbSerializer