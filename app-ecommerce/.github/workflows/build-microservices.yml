name: Build Microservices

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/**'
      - 'api-gateway/**'
  pull_request:
    branches: [main]
    paths:
      - 'services/**'
      - 'api-gateway/**'

env:
  REGISTRY: quay.io
  NAMESPACE: jeanlopezxyz

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Microservices
    strategy:
      matrix:
        service: 
          - user-service
          - product-service
          - order-service
          - payment-service
          - inventory-service
          - notification-service
          - api-gateway
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            services/${{ matrix.service }}/package-lock.json
            api-gateway/package-lock.json

      - name: Install dependencies
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            cd services/${{ matrix.service }}
          else
            cd ${{ matrix.service }}
          fi
          npm ci

      - name: Run linting
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            cd services/${{ matrix.service }}
          else
            cd ${{ matrix.service }}
          fi
          npm run lint || echo "No lint script"

      - name: Run tests
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            cd services/${{ matrix.service }}
          else
            cd ${{ matrix.service }}
          fi
          npm test || echo "No test script"

      - name: Security audit
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            cd services/${{ matrix.service }}
          else
            cd ${{ matrix.service }}
          fi
          npm audit --audit-level high

  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build Container Images
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: 
          - user-service
          - product-service
          - order-service
          - payment-service
          - inventory-service
          - notification-service
          - api-gateway
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'api-gateway' && 'api-gateway' || format('services/{0}', matrix.service) }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    name: Security Scan Images
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: 
          - user-service
          - product-service
          - order-service
          - payment-service
          - inventory-service
          - notification-service
          - api-gateway
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  trigger-gitops:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    name: Trigger GitOps Update
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger ArgoCD Sync
        run: |
          echo "ðŸš€ Triggering GitOps deployment..."
          # This would trigger ArgoCD to pick up new images
          # Could be webhook, API call, or Git commit to GitOps repo