name: E-commerce Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  NAMESPACE: redhat/demojam

jobs:
  test:
    name: Test & Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: 
          - user-service
          - product-service
          - order-service
          - payment-service
          - inventory-service
          - notification-service
          - api-gateway
          - frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          services/${{ matrix.service }}/package-lock.json
          api-gateway/package-lock.json
          frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
        elif [ -f "${{ matrix.service }}/package.json" ]; then
          cd ${{ matrix.service }}
        fi
        npm ci
    
    - name: Run linting
      run: |
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
        elif [ -f "${{ matrix.service }}/package.json" ]; then
          cd ${{ matrix.service }}
        fi
        npm run lint || echo "No lint script found"
    
    - name: Run tests
      run: |
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
        elif [ -f "${{ matrix.service }}/package.json" ]; then
          cd ${{ matrix.service }}
        fi
        npm test || echo "No test script found"
    
    - name: Run security audit
      run: |
        if [ -f "services/${{ matrix.service }}/package.json" ]; then
          cd services/${{ matrix.service }}
        elif [ -f "${{ matrix.service }}/package.json" ]; then
          cd ${{ matrix.service }}
        fi
        npm audit --audit-level high
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build & Package
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: 
          - user-service
          - product-service
          - order-service
          - payment-service
          - inventory-service
          - notification-service
          - api-gateway
          - frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: |
          ${{ matrix.service == 'frontend' && 'frontend' || 
              matrix.service == 'api-gateway' && 'api-gateway' || 
              format('services/{0}', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: 
          - user-service
          - product-service
          - order-service
          - payment-service
          - inventory-service
          - notification-service
          - api-gateway
          - frontend
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ecommerce.company.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ecommerce-staging-cluster
    
    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/user-service user-service=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/user-service:${{ github.sha }} -n staging
        kubectl set image deployment/product-service product-service=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/product-service:${{ github.sha }} -n staging
        kubectl set image deployment/order-service order-service=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/order-service:${{ github.sha }} -n staging
        kubectl set image deployment/payment-service payment-service=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/payment-service:${{ github.sha }} -n staging
        kubectl set image deployment/inventory-service inventory-service=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/inventory-service:${{ github.sha }} -n staging
        kubectl set image deployment/notification-service notification-service=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/notification-service:${{ github.sha }} -n staging
        kubectl set image deployment/api-gateway api-gateway=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/api-gateway:${{ github.sha }} -n staging
        kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/frontend:${{ github.sha }} -n staging
    
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/user-service -n staging --timeout=300s
        kubectl rollout status deployment/product-service -n staging --timeout=300s
        kubectl rollout status deployment/order-service -n staging --timeout=300s
        kubectl rollout status deployment/payment-service -n staging --timeout=300s
        kubectl rollout status deployment/inventory-service -n staging --timeout=300s
        kubectl rollout status deployment/notification-service -n staging --timeout=300s
        kubectl rollout status deployment/api-gateway -n staging --timeout=300s
        kubectl rollout status deployment/frontend -n staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        curl -f https://staging.ecommerce.company.com/health || exit 1
        curl -f https://staging-api.ecommerce.company.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ecommerce.company.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ecommerce-production-cluster
    
    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        kubectl apply -f infrastructure/k8s/production/green/ -n production
        
        # Wait for green to be ready
        kubectl rollout status deployment/user-service-green -n production --timeout=600s
        kubectl rollout status deployment/product-service-green -n production --timeout=600s
        kubectl rollout status deployment/order-service-green -n production --timeout=600s
        kubectl rollout status deployment/payment-service-green -n production --timeout=600s
        kubectl rollout status deployment/inventory-service-green -n production --timeout=600s
        kubectl rollout status deployment/notification-service-green -n production --timeout=600s
        kubectl rollout status deployment/api-gateway-green -n production --timeout=600s
        kubectl rollout status deployment/frontend-green -n production --timeout=600s
        
        # Run production smoke tests
        kubectl run --rm -i --tty health-check --image=curlimages/curl --restart=Never -- \
          curl -f http://api-gateway-green-service.production.svc.cluster.local:8080/health
        
        # Switch traffic to green
        kubectl patch service api-gateway-service -n production -p '{"spec":{"selector":{"version":"green"}}}'
        kubectl patch service frontend-service -n production -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Cleanup blue environment
        kubectl delete -f infrastructure/k8s/production/blue/ -n production --ignore-not-found=true

  notification:
    name: Notify Teams
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Update Backstage deployment status
      run: |
        curl -X POST "${{ secrets.BACKSTAGE_API_URL }}/api/deployments" \
          -H "Authorization: Bearer ${{ secrets.BACKSTAGE_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "ecommerce-platform",
            "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}",
            "version": "${{ github.sha }}",
            "status": "${{ job.status }}",
            "timestamp": "${{ github.event.head_commit.timestamp }}"
          }'