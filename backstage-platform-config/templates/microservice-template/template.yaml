apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ecommerce-microservice-template
  title: E-commerce Microservice Template
  description: Enterprise-grade microservice template with security, monitoring, and deployment best practices
  tags:
    - recommended
    - nodejs
    - microservice
    - enterprise
    - production-ready
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  owner: platform-team
  type: service
  
  parameters:
    - title: Service Information
      required:
        - name
        - description
        - owner
      properties:
        name:
          title: Service Name
          type: string
          description: Name of the microservice (e.g., recommendation-service)
          pattern: '^[a-z][a-z0-9-]*[a-z0-9]$'
          ui:autofocus: true
          ui:help: 'Must be lowercase, alphanumeric with dashes. Will be used for Docker images, Kubernetes deployments, etc.'
        description:
          title: Description
          type: string
          description: Brief description of the service business purpose
          ui:widget: textarea
          ui:options:
            rows: 3
        owner:
          title: Owner Team
          type: string
          description: Team responsible for this service
          enum:
            - platform-team
            - auth-team
            - catalog-team
            - orders-team
            - payments-team
            - inventory-team
          enumNames:
            - Platform Team
            - Authentication Team
            - Catalog Team
            - Orders Team
            - Payments Team
            - Inventory Team
          default: platform-team
    
    - title: Technical Configuration
      required:
        - database
        - port
        - environment
      properties:
        database:
          title: Primary Database
          type: string
          description: Primary database technology for this service
          enum:
            - postgresql
            - mongodb
            - redis-only
            - none
          enumNames:
            - PostgreSQL (Relational data, ACID compliance)
            - MongoDB (Document data, flexible schema)
            - Redis Only (Cache/Session data)
            - None (Stateless service)
          default: postgresql
        port:
          title: Service Port
          type: number
          description: Port number for the service (3000-3999 range)
          minimum: 3000
          maximum: 3999
          default: 3007
        environment:
          title: Initial Environment
          type: string
          description: Target deployment environment
          enum:
            - development
            - staging
            - production
          default: development
    
    - title: Service Features
      properties:
        hasAuth:
          title: JWT Authentication
          type: boolean
          description: Include JWT token authentication middleware
          default: true
        hasMetrics:
          title: Prometheus Metrics
          type: boolean
          description: Include Prometheus metrics collection and health endpoints
          default: true
        hasCache:
          title: Redis Caching
          type: boolean
          description: Include Redis caching layer for performance
          default: false
        hasRateLimit:
          title: Rate Limiting
          type: boolean
          description: Include API rate limiting middleware
          default: true
        hasValidation:
          title: Input Validation
          type: boolean
          description: Include Joi schema validation for all endpoints
          default: true
        hasSwagger:
          title: API Documentation
          type: boolean
          description: Generate OpenAPI/Swagger documentation
          default: true
        hasTests:
          title: Test Suite
          type: boolean
          description: Include comprehensive test suite (unit, integration, E2E)
          default: true
        hasDocker:
          title: Docker Configuration
          type: boolean
          description: Include production-ready Dockerfile with security best practices
          default: true
        hasK8s:
          title: Kubernetes Manifests
          type: boolean
          description: Include Kubernetes deployment, service, and HPA configurations
          default: true
        hasCICD:
          title: CI/CD Pipeline
          type: boolean
          description: Include GitHub Actions workflow for automated testing and deployment
          default: true

  steps:
    - id: fetch
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          database: ${{ parameters.database }}
          port: ${{ parameters.port }}
          hasAuth: ${{ parameters.hasAuth }}
          hasCache: ${{ parameters.hasCache }}
          enableMetrics: ${{ parameters.enableMetrics }}
          enableHealthCheck: ${{ parameters.enableHealthCheck }}
          enableDocs: ${{ parameters.enableDocs }}
          enableTests: ${{ parameters.enableTests }}
    
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        repoUrl: github.com?owner=company&repo=ecommerce-platform
        directory: services/${{ parameters.name }}
        gitCommitMessage: 'feat: add ${{ parameters.name }} microservice via Backstage template'
        gitAuthorName: ${{ user.entity.metadata.name }}
        gitAuthorEmail: ${{ user.entity.spec.profile.email }}
    
    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/services/${{ parameters.name }}/catalog-info.yaml'
    
    - id: create-pr
      name: Create Pull Request
      action: github:pullRequest:create
      input:
        repoUrl: github.com?owner=company&repo=ecommerce-platform
        title: 'feat: add ${{ parameters.name }} microservice'
        body: |
          ## New Microservice: ${{ parameters.name }}
          
          **Description**: ${{ parameters.description }}
          **Owner**: ${{ parameters.owner }}
          **Database**: ${{ parameters.database }}
          **Port**: ${{ parameters.port }}
          
          ### Features Enabled:
          - Authentication: ${{ parameters.hasAuth }}
          - Caching: ${{ parameters.hasCache }}
          - Metrics: ${{ parameters.enableMetrics }}
          - Health Checks: ${{ parameters.enableHealthCheck }}
          - API Docs: ${{ parameters.enableDocs }}
          - Test Suite: ${{ parameters.enableTests }}
          
          **Generated by**: Backstage Software Template
          **Template**: microservice-template
          
          ### Next Steps:
          1. Review the generated code
          2. Update environment variables
          3. Run local tests
          4. Deploy to staging environment
        head: feature/${{ parameters.name }}-service
        base: develop

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Pull Request
        url: ${{ steps.create-pr.output.pullRequestUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}